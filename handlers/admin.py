import asyncio
import logging
import json
import os
from typing import Dict, Any, List
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# =========================================================
# === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ô (STATES) ======================
# =========================================================

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
class AdminSettingsStates(StatesGroup):
    waiting_for_min_stars = State()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π
class MailingStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_photo = State()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞–º–∏
class CheckSystemStates(StatesGroup):
    waiting_for_stars = State()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏
class AdminManagementStates(StatesGroup):
    waiting_for_admin_id_to_add = State()
    waiting_for_admin_id_to_remove = State()

# =========================================================
# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–î–ú–ò–ù–û–í ===================
# =========================================================

ADMINS_FILE_PATH = 'admins.json'
OWNER_ID = 7592097268

def load_admins():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ —Å OWNER_ID."""
    if not os.path.exists(ADMINS_FILE_PATH):
        with open(ADMINS_FILE_PATH, 'w') as f:
            json.dump({'admin_ids': [OWNER_ID]}, f)
        return [OWNER_ID]
    
    with open(ADMINS_FILE_PATH, 'r') as f:
        data = json.load(f)
        return data.get('admin_ids', [])

def save_admins(admin_list):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ —Ñ–∞–π–ª."""
    with open(ADMINS_FILE_PATH, 'w') as f:
        json.dump({'admin_ids': admin_list}, f, indent=4)

ADMIN_IDS = load_admins()

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º."""
    return user_id in ADMIN_IDS

def add_admin(user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª."""
    if user_id not in ADMIN_IDS:
        ADMIN_IDS.append(user_id)
        save_admins(ADMIN_IDS)

def remove_admin(user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª."""
    if user_id in ADMIN_IDS and user_id != OWNER_ID:
        ADMIN_IDS.remove(user_id)
        save_admins(ADMIN_IDS)

# =========================================================
# === –û–°–ù–û–í–ù–û–ô –ö–û–î ADMIN.PY ===============================
# =========================================================

router = Router()
logger = logging.getLogger(__name__)

# Mock-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ —É –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–∏–º —Ñ–∞–π–ª–∞–º
try:
    from utils.file_utils import get_connections, load_settings, save_settings, get_setting, set_setting, get_recent_logs
    from utils.transfer import transfer_all_unique_gifts, get_star_balance, get_unique_gifts, get_regular_gifts
    from utils.logging import log_admin_action, log_performance
    from utils.automation import send_smart_notifications, auto_transfer_nft_when_ready
    from utils.statistics import get_statistics, generate_statistics_report
    from utils.user_management import get_users_list, get_user_detailed_info
    from utils.mass_operations import mass_transfer_nft, transfer_nft_for_user
    from utils.check_system import create_check, get_all_checks, get_checks_statistics, delete_check, get_unused_checks, get_check
    from utils.database import db
except ImportError as e:
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ç–∏–ª–∏—Ç—ã: {e}. –†–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, —á—Ç–æ–±—ã –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–ª
    def get_connections(): return []
    def load_settings(): return {}
    def save_settings(): pass
    def get_setting(key, default): return default
    def set_setting(key, value): pass
    def get_recent_logs(limit): return []
    async def get_user_detailed_info(bot, user_id): return {}
    async def mass_transfer_nft(bot): return "‚ùå –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    def log_admin_action(user_id, action, details): pass
    async def generate_statistics_report(): return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    def get_checks_statistics(): return {'total_checks': 0, 'used_checks': 0, 'unused_checks': 0, 'total_stars': 0, 'used_stars': 0, 'unused_stars': 0}
    def get_check(check_id): return None
    def delete_check(check_id): return False
    async def get_users_list(): return []
    async def get_star_balance(bot, business_connection_id): return 0
    class MockDb:
        def get_all_users(self): return []
    db = MockDb()

# =========================================================
# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ =========================
# =========================================================

@router.callback_query(F.data == "admin_manage_admins")
async def admin_manage_admins(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–∏."""
    if callback.from_user.id != OWNER_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.", show_alert=True)
        return

    text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"
    if ADMIN_IDS:
        admin_list = "\n".join([f"üë§ ID: <code>{admin_id}</code>" for admin_id in ADMIN_IDS])
        text += f"<b>–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>\n{admin_list}"
    else:
        text += "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç."

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add_admin"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_remove_admin")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ])

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "admin_add_admin")
async def admin_add_admin_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞."""
    if callback.from_user.id != OWNER_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    await state.set_state(AdminManagementStates.waiting_for_admin_id_to_add)

    text = (
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_manage_admins")]
    ])
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.message(AdminManagementStates.waiting_for_admin_id_to_add)
async def handle_add_admin_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã."""
    if message.from_user.id != OWNER_ID:
        return

    try:
        new_admin_id = int(message.text.strip())
        
        if new_admin_id in ADMIN_IDS:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{new_admin_id}</code> —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                parse_mode="HTML"
            )
        else:
            add_admin(new_admin_id)
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{new_admin_id}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                parse_mode="HTML"
            )

        await state.clear()
        
        await admin_manage_admins(
            await message.answer(
                "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]])
            )
        )

    except (ValueError, TypeError):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")

@router.callback_query(F.data == "admin_remove_admin")
async def admin_remove_admin_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞."""
    if callback.from_user.id != OWNER_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    await state.set_state(AdminManagementStates.waiting_for_admin_id_to_remove)

    text = (
        "‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n"
        "<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è.\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_manage_admins")]
    ])

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.message(AdminManagementStates.waiting_for_admin_id_to_remove)
async def handle_remove_admin_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω–æ–≤."""
    if message.from_user.id != OWNER_ID:
        return

    try:
        admin_id_to_remove = int(message.text.strip())
        
        if admin_id_to_remove == OWNER_ID:
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞.", parse_mode="HTML")
        elif admin_id_to_remove not in ADMIN_IDS:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{admin_id_to_remove}</code> –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                parse_mode="HTML"
            )
        else:
            remove_admin(admin_id_to_remove)
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{admin_id_to_remove}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                parse_mode="HTML"
            )

        await state.clear()
        
        await admin_manage_admins(
            await message.answer(
                "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]])
            )
        )

    except (ValueError, TypeError):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")

# =========================================================
# === –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =======================
# =========================================================

async def safe_edit_message(message, text: str, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    try:
        current_text = message.text or message.caption or ""
        if current_text == text:
            return False
        
        await message.edit_text(text, **kwargs)
        return True
    except Exception as e:
        if "message is not modified" in str(e).lower():
            return False
        else:
            raise e

def get_admin_panel_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    auto_transfer = get_setting('auto_transfer', True)
    manual_selection = get_setting('manual_selection', False)
    auto_notifications = get_setting('auto_notifications', True)
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ NFT", callback_data="admin_mass_nft"),
            InlineKeyboardButton(text="‚≠êÔ∏è –ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–≤–µ–∑–¥", callback_data="admin_mass_stars")
        ],
        [
            InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_mailing"),
            InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ],
        [
            InlineKeyboardButton(text="üé´ –°–∏—Å—Ç–µ–º–∞ —á–µ–∫–æ–≤", callback_data="admin_checks"),
            InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="admin_logs")
        ],
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_manage_admins")]
    ])

@router.message(F.text == "/admin")
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        return
    
    keyboard = get_admin_panel_keyboard()
    await message.answer(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å NFT Gift Bot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_stats")
async def admin_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        return
    
    await callback.answer("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    try:
        report = await generate_statistics_report()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        edited = await safe_edit_message(
            callback.message,
            report,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        if not edited:
            await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await safe_edit_message(
            callback.message,
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        return
    
    await callback.answer("üë• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        users = await get_users_list()
        
        if not users:
            users_text = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        else:
            users_text = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
            for i, user in enumerate(users[:20], 1):
                username = user.get('username', 'N/A')
                user_id = user.get('user_id', 'N/A')
                connection_date = user.get('connection_date', 'N/A')[:10]
                
                users_text += f"{i}. @{username} (ID: {user_id})\n"
                users_text += f"   üìÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: {connection_date}\n\n"
            
            if len(users) > 20:
                users_text += f"... –∏ –µ—â—ë {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            keyboard = []
            for i, user in enumerate(users[:10], 1):
                username = user.get('username', f'User{i}')
                user_id = user.get('user_id')
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üë§ {username}",
                        callback_data=f"user_info:{user_id}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        edited = await safe_edit_message(
            callback.message,
            users_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        if not edited:
            await callback.answer("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç—É–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await safe_edit_message(
            callback.message,
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

@router.callback_query(F.data.startswith("user_info:"))
async def user_info(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if not is_admin(callback.from_user.id):
        return
    
    user_id = int(callback.data.split(":")[1])
    await callback.answer(f"üë§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}...")
    
    try:
        user_info = await get_user_detailed_info(callback.bot, user_id)
        
        if not user_info:
            await callback.message.edit_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
                ])
            )
            return
        
        username = user_info.get('username', 'N/A')
        connection_date = user_info.get('connection_date', 'N/A')[:10]
        star_balance = user_info.get('star_balance', 'N/A')
        nft_count = user_info.get('nft_count', 'N/A')
        total_transfers = user_info.get('total_transfers', 0)
        success_rate = user_info.get('success_rate', 0)
        
        text = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üë§ Username: @{username}\n"
            f"üìÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: {connection_date}\n"
            f"‚≠êÔ∏è –ó–≤–µ–∑–¥: {star_balance}\n"
            f"üéÅ NFT: {nft_count}\n"
            f"üîÑ –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {total_transfers}\n"
            f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n"
        )
        
        keyboard = [
            [InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data=f"user_logs:{user_id}")],
            [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å NFT", callback_data=f"retry_nft_user:{user_id}")],
            [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", url=f"tg://user?id={user_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ]
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
            ])
        )

@router.callback_query(F.data == "admin_mass_nft")
async def admin_mass_nft(callback: CallbackQuery):
    """–ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ NFT"""
    if not is_admin(callback.from_user.id):
        return
    
    await callback.answer("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ NFT...")
    
    try:
        result = await mass_transfer_nft(callback.bot)
        
        await callback.message.edit_text(
            result,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ NFT: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ NFT: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

async def admin_settings_from_message(message: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)"""
    auto_transfer = get_setting('auto_transfer', True)
    manual_selection = get_setting('manual_selection', False)
    auto_notifications = get_setting('auto_notifications', True)
    min_stars = get_setting('min_stars_for_auto_transfer', 10)
    
    text = (
        "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        f"ü§ñ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if auto_transfer else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
        f"üëÜ –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if manual_selection else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
        f"üîî –ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if auto_notifications else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
        f"‚≠êÔ∏è –ú–∏–Ω. –∑–≤–µ–∑–¥ –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞: {min_stars}\n"
    )
    
    keyboard = [
        [
            InlineKeyboardButton(
                text="ü§ñ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥",
                callback_data="admin_toggle_auto"
            ),
            InlineKeyboardButton(
                text="üëÜ –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä",
                callback_data="admin_toggle_manual"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                callback_data="admin_toggle_notifications"
            ),
            InlineKeyboardButton(
                text="‚≠êÔ∏è –ú–∏–Ω. –∑–≤–µ–∑–¥",
                callback_data="admin_min_stars"
            )
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

async def admin_back_from_message(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)"""
    keyboard = get_admin_panel_keyboard()
    await message.answer(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å NFT Gift Bot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_settings")
async def admin_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    if not is_admin(callback.from_user.id):
        return
    
    auto_transfer = get_setting('auto_transfer', True)
    manual_selection = get_setting('manual_selection', False)
    auto_notifications = get_setting('auto_notifications', True)
    min_stars = get_setting('min_stars_for_auto_transfer', 10)
    
    text = (
        "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        f"ü§ñ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if auto_transfer else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
        f"üëÜ –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if manual_selection else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}\n"
        f"üîî –ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if auto_notifications else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
        f"‚≠êÔ∏è –ú–∏–Ω. –∑–≤–µ–∑–¥ –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞: {min_stars}\n"
    )
    
    keyboard = [
        [
            InlineKeyboardButton(
                text="ü§ñ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥",
                callback_data="admin_toggle_auto"
            ),
            InlineKeyboardButton(
                text="üëÜ –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä",
                callback_data="admin_toggle_manual"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                callback_data="admin_toggle_notifications"
            ),
            InlineKeyboardButton(
                text="‚≠êÔ∏è –ú–∏–Ω. –∑–≤–µ–∑–¥",
                callback_data="admin_min_stars"
            )
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data == "admin_toggle_auto")
async def admin_toggle_auto(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞"""
    if not is_admin(callback.from_user.id):
        return
    
    current = get_setting('auto_transfer', True)
    set_setting('auto_transfer', not current)
    save_settings()
    
    await callback.answer(f"–ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ {'–≤–∫–ª—é—á–µ–Ω' if not current else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    await admin_settings(callback)

@router.callback_query(F.data == "admin_toggle_manual")
async def admin_toggle_manual(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        return
    
    current = get_setting('manual_selection', False)
    set_setting('manual_selection', not current)
    save_settings()
    
    await callback.answer(f"–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä {'–≤–∫–ª—é—á–µ–Ω' if not current else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    await admin_settings(callback)

@router.callback_query(F.data == "admin_toggle_notifications")
async def admin_toggle_notifications(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not is_admin(callback.from_user.id):
        return
    
    current = get_setting('auto_notifications', True)
    set_setting('auto_notifications', not current)
    save_settings()
    
    await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if not current else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")
    await admin_settings(callback)

@router.callback_query(F.data == "admin_min_stars")
async def admin_min_stars(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥"""
    if not is_admin(callback.from_user.id):
        return
    
    current_min_stars = get_setting('min_stars_for_auto_transfer', 10)
    
    text = (
        "‚≠êÔ∏è <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞</b>\n\n"
        f"üìä –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current_min_stars}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    )
    
    keyboard = [
        [
            InlineKeyboardButton(text="5", callback_data="admin_set_min_stars:5"),
            InlineKeyboardButton(text="10", callback_data="admin_set_min_stars:10"),
            InlineKeyboardButton(text="15", callback_data="admin_set_min_stars:15")
        ],
        [
            InlineKeyboardButton(text="20", callback_data="admin_set_min_stars:20"),
            InlineKeyboardButton(text="25", callback_data="admin_set_min_stars:25"),
            InlineKeyboardButton(text="30", callback_data="admin_set_min_stars:30")
        ],
        [
            InlineKeyboardButton(text="50", callback_data="admin_set_min_stars:50"),
            InlineKeyboardButton(text="100", callback_data="admin_set_min_stars:100")
        ],
        [
            InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="admin_manual_min_stars")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_settings")]
    ]
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(F.data.startswith("admin_set_min_stars:"))
async def admin_set_min_stars(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥"""
    if not is_admin(callback.from_user.id):
        return
    
    try:
        new_value = int(callback.data.split(":")[1])
        
        set_setting('min_stars_for_auto_transfer', new_value)
        save_settings()
        
        await callback.answer(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_value}")
        await admin_settings(callback)
        
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "admin_manual_min_stars")
async def admin_manual_min_stars(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥"""
    if not is_admin(callback.from_user.id):
        return
    
    await state.set_state(AdminSettingsStates.waiting_for_min_stars)
    
    text = (
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥</b>\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000\n"
        "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 25\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")]
    ])
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.message(AdminSettingsStates.waiting_for_min_stars)
async def handle_manual_min_stars(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        if not message.text.isdigit():
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000\n"
                "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 25\n\n"
                "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
                parse_mode="HTML"
            )
            return
        
        value = int(message.text)
        
        if value < 1 or value > 1000:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
                "üìù –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n"
                "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
                parse_mode="HTML"
            )
            return
        
        set_setting('min_stars_for_auto_transfer', value)
        save_settings()
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value}</b>",
            parse_mode="HTML"
        )
        
        await admin_settings_from_message(message)
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n"
            "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 25\n\n"
            "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
            parse_mode="HTML"
        )

# =========================================================
# === –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥... ====================================
# =========================================================

@router.message(F.text == "/cancel")
async def cancel_input(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è)"""
    if not is_admin(message.from_user.id):
        return
    
    current_state = await state.get_state()
    
    if current_state == AdminSettingsStates.waiting_for_min_stars.state:
        await state.clear()
        await message.answer("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")
        await admin_settings_from_message(message)
    elif current_state == AdminManagementStates.waiting_for_admin_id_to_add.state or current_state == AdminManagementStates.waiting_for_admin_id_to_remove.state:
        await state.clear()
        await message.answer("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")
        await admin_manage_admins(await message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."))
    elif current_state == MailingStates.waiting_for_text.state or current_state == MailingStates.waiting_for_photo.state:
        await state.clear()
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@router.callback_query(F.data == "admin_mailing")
async def admin_mailing(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        return
    
    await state.set_state(MailingStates.waiting_for_text)
    
    text = (
        "üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞:\n"
        "‚Ä¢ <b>–∂–∏—Ä–Ω—ã–π</b>\n"
        "‚Ä¢ <i>–∫—É—Ä—Å–∏–≤</i>\n"
        "‚Ä¢ <code>–∫–æ–¥</code>\n"
        "‚Ä¢ <a href='—Å—Å—ã–ª–∫–∞'>—Å—Å—ã–ª–∫–∞</a>\n\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "mailing_skip_photo")
async def mailing_skip_photo(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        return
    
    data = await state.get_data()
    mailing_text = data.get('mailing_text', '')
    
    text = (
        "üì¢ <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{mailing_text[:200]}{'...' if len(mailing_text) > 200 else ''}\n\n"
        "üì∑ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> ‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\n"
        "üöÄ –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "‚ùå –ò–ª–∏ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="mailing_send")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "mailing_send")
async def mailing_send(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        return
    
    await callback.answer("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    try:
        data = await state.get_data()
        mailing_text = data.get('mailing_text', '')
        photo_file_id = data.get('photo_file_id', None)
        
        users = db.get_all_users()
        
        if not users:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
                "üë• –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ])
            )
            await state.clear()
            return
        
        success_count = 0
        failed_count = 0
        
        progress_message = await callback.message.edit_text(
            f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n"
            f"‚ùå –û—à–∏–±–æ–∫: 0",
            parse_mode="HTML"
        )
        
        for i, user in enumerate(users, 1):
            try:
                user_id = user.get('user_id')
                if not user_id:
                    continue
                
                if photo_file_id:
                    await callback.bot.send_photo(
                        chat_id=user_id,
                        photo=photo_file_id,
                        caption=mailing_text,
                        parse_mode="HTML"
                    )
                else:
                    await callback.bot.send_message(
                        chat_id=user_id,
                        text=mailing_text,
                        parse_mode="HTML"
                    )
                
                success_count += 1
                
                if i % 10 == 0:
                    await progress_message.edit_text(
                        f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
                        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}",
                        parse_mode="HTML"
                    )
                
                await asyncio.sleep(0.1)
                
            except Exception as e:
                failed_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        await progress_message.edit_text(
            f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n\n"
            f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{mailing_text[:100]}{'...' if len(mailing_text) > 100 else ''}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
        await state.clear()

@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(callback.from_user.id):
        return
    
    keyboard = get_admin_panel_keyboard()
    await callback.message.edit_text(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å NFT Gift Bot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_logs")
async def admin_logs(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"""
    if not is_admin(callback.from_user.id):
        return
    
    await callback.answer("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏...")
    
    try:
        logs = get_recent_logs(10)
        
        if not logs:
            text = "üìã <b>–õ–æ–≥–∏ –ø—É—Å—Ç—ã</b>"
        else:
            text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n\n"
            for i, log in enumerate(logs[:5], 1):
                timestamp = log.get('timestamp', '')[:19]
                user_id = log.get('user_id', 'N/A')
                status = log.get('status', 'N/A')
                error = log.get('error', '')
                
                text += f"<b>{i}.</b> üïê {timestamp}\n"
                text += f"üë§ ID: {user_id} | üìä {status}\n"
                if error:
                    text += f"‚ùå {error[:50]}...\n"
                text += "\n"
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_logs")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

@router.callback_query(F.data == "admin_mass_stars")
async def admin_mass_stars(callback: CallbackQuery):
    """–ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–≤–µ–∑–¥"""
    if not is_admin(callback.from_user.id):
        return
    
    await callback.answer("‚≠êÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–≤–µ–∑–¥...")
    
    try:
        connections = get_connections()
        total_stars = 0
        successful = 0
        failed = 0
        errors = []
        
        for connection in connections:
            try:
                user_id = connection.get('user_id')
                business_connection_id = connection.get('business_connection_id')
                if user_id and business_connection_id:
                    balance = await get_star_balance(callback.bot, business_connection_id)
                    if balance and balance > 0:
                        total_stars += balance
                        successful += 1
            except Exception as e:
                failed += 1
                user_id = connection.get('user_id', 'Unknown')
                errors.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {str(e)}")
        
        text = (
            f"‚≠êÔ∏è <b>–ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–≤–µ–∑–¥ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
            f"üë• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(connections)}\n"
            f"‚≠êÔ∏è –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {total_stars}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed}\n"
        )
        
        if errors:
            text += "\n‚ö†Ô∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏:</b>\n"
            for error in errors[:3]:
                text += f"‚Ä¢ {error}\n"
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–≤–µ–∑–¥: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–≤–µ–∑–¥: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )

@router.message(F.text == "/logs")
async def show_logs(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        logs = get_recent_logs(10)
        
        if not logs:
            await message.answer("üìã –õ–æ–≥–∏ –ø—É—Å—Ç—ã")
            return
        
        log_text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n\n"
        for log in logs:
            timestamp = log.get('timestamp', '')[:19]
            user_id = log.get('user_id', 'N/A')
            status = log.get('status', 'N/A')
            error = log.get('error', '')
            
            log_text += f"üïê {timestamp}\n"
            log_text += f"üë§ ID: {user_id}\n"
            log_text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            if error:
                log_text += f"‚ùå –û—à–∏–±–∫–∞: {error}\n"
            log_text += "\n"
        
        await message.answer(log_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}")

@router.message(F.text.startswith("/delete_check"))
async def delete_check_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞ –ø–æ ID"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!</b>\n\n"
                "üí° <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b>\n"
                "<code>/delete_check ID_—á–µ–∫–∞</code>\n\n"
                "üìù <b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "<code>/delete_check d4080cb3-1d1e-4dfd-a782-88549703df2a</code>",
                parse_mode="HTML"
            )
            return
        
        check_id = parts[1].strip()
        check = get_check(check_id)
        
        if not check:
            await message.answer(
                "‚ùå <b>–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                f"ID: <code>{check_id}</code>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID —á–µ–∫–∞.",
                parse_mode="HTML"
            )
            return
        
        if check["used"]:
            await message.answer(
                "‚ùå <b>–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —á–µ–∫!</b>\n\n"
                f"üé´ <b>ID —á–µ–∫–∞:</b> <code>{check['id']}</code>\n"
                f"‚≠êÔ∏è <b>–ó–≤–µ–∑–¥:</b> {check['stars_amount']}\n"
                f"üë§ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª:</b> {check.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üìÖ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:</b> {check.get('used_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:19].replace('T', ' ') if check.get('used_at') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                parse_mode="HTML"
            )
            return
        
        if delete_check(check_id):
            text = (
                f"‚úÖ <b>–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"üé´ <b>ID —á–µ–∫–∞:</b> <code>{check['id']}</code>\n"
                f"‚≠êÔ∏è <b>–ó–≤–µ–∑–¥:</b> {check['stars_amount']}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {check.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {check['created_at'][:19].replace('T', ' ')}\n\n"
                f"üóëÔ∏è –ß–µ–∫ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
            )
            
            log_admin_action(
                message.from_user.id,
                "delete_check_command",
                f"deleted check {check_id} ({check['stars_amount']} stars)"
            )
        else:
            text = "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞!</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞:</b> {str(e)}",
            parse_mode="HTML"
        )

@router.message(F.text == "/help")
async def show_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    if not is_admin(message.from_user.id):
        return
    
    help_text = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∞–¥–º–∏–Ω–∞</b>\n\n"
        "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
        "/logs - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üé´ <b>–°–∏—Å—Ç–µ–º–∞ —á–µ–∫–æ–≤:</b>\n"
        "/delete_check <ID> - —É–¥–∞–ª–∏—Ç—å —á–µ–∫ –ø–æ ID\n"
        "–ü—Ä–∏–º–µ—Ä: /delete_check d4080cb3-1d1e-4dfd-a782-88549703df2a\n\n"
        "üîß <b>–§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:</b>\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ üîÑ –ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ NFT - –ø–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö NFT\n"
        "‚Ä¢ ‚≠êÔ∏è –ú–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∑–≤–µ–∑–¥ - –ø–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –∑–≤–µ–∑–¥\n"
        "‚Ä¢ üì¢ –†–∞—Å—Å—ã–ª–∫–∞ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "‚Ä¢ üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
        "‚Ä¢ üìã –õ–æ–≥–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤\n"
        "‚Ä¢ üé´ –°–∏—Å—Ç–µ–º–∞ —á–µ–∫–æ–≤ - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞–º–∏"
    )
    
    await message.answer(help_text, parse_mode="HTML")

@router.callback_query(F.data == "admin_checks")
async def admin_checks(callback: CallbackQuery):
    """–°–∏—Å—Ç–µ–º–∞ —á–µ–∫–æ–≤"""
    if not is_admin(callback.from_user.id):
        return
    
    try:
        stats = get_checks_statistics()
        
        text = (
            "üé´ <b>–°–∏—Å—Ç–µ–º–∞ —á–µ–∫–æ–≤ –Ω–∞ –∑–≤–µ–∑–¥—ã</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —á–µ–∫–æ–≤: {stats['total_checks']}\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['used_checks']}\n"
            f"‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['unused_checks']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {stats['total_stars']}\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–≤–µ–∑–¥: {stats['used_stars']}\n"
            f"‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–≤–µ–∑–¥: {stats['unused_stars']}\n\n"
            "üí° <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫:</b>\n"
            "1. –í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ: @Storthash_bot —á–µ–∫ 100 –ü–æ–¥–∞—Ä–æ–∫\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–π —á–µ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —á–µ–∫", callback_data="admin_create_check")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —á–µ–∫–æ–≤", callback_data="admin_list_checks")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —á–µ–∫–æ–≤: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ–∫–æ–≤: {str(e)}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ])
        )