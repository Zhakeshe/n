import hashlib
import random
import string
import logging
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineQuery, InlineQueryResultArticle, InputTextMessageContent, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, InputMediaPhoto, LabeledPrice, PreCheckoutQuery, SuccessfulPayment
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import is_admin, WELCOME_MESSAGE, VERIFICATION_TEXT, VERIFICATION_KEYBOARD, CHANNEL_LINK, REVIEWS_LINK
from utils.check_system import get_check, use_check
from utils.check_design import get_check_design, get_check_button_text
from utils.logging import log_admin_action

router = Router()
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤
inline_cache = {}

# =========================================================
# === State machine (“õ–∞–ª–ø—ã–Ω) –∞–Ω—ã“õ—Ç–∞—É =================
# =========================================================
class TopupState(StatesGroup):
    """–ñ“±–ª–¥—ã–∑–¥–∞—Ä–¥—ã —Ç–æ–ª—ã“õ—Ç—ã—Ä—É –ø—Ä–æ—Ü–µ—Å—ñ–Ω—ñ“£ –∫“Ø–π–ª–µ—Ä—ñ"""
    waiting_for_stars_amount = State()

# –ú—ã—Å–∞–ª —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä (—Å—ñ–∑ –æ–ª–∞—Ä–¥—ã ”©–∑ DB-—ñ“£—ñ–∑–¥–µ–Ω –∞–ª—É—ã“£—ã–∑ –∫–µ—Ä–µ–∫)
def get_user_balance(user_id: int) -> int:
    """–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ –∂“±–ª–¥—ã–∑ –±–∞–ª–∞–Ω—Å—ã–Ω “õ–∞–π—Ç–∞—Ä–∞–¥—ã.
    
    –ù–ê–ó–ê–† –ê–£–î–ê–†–´“¢–´–ó: –ë“±–ª —Ç–µ–∫ –º—ã—Å–∞–ª, —Å—ñ–∑ –æ–Ω—ã ”©–∑ DB-—ñ“£—ñ–∑–¥–µ–Ω –∞–ª—É—ã“£—ã–∑ –∫–µ—Ä–µ–∫.
    """
    # –ï–≥–µ—Ä —Å—ñ–∑–¥–µ –Ω–∞“õ—Ç—ã –±–∞–ª–∞–Ω—Å –±–æ–ª—Å–∞, –º—ã—Å–∞–ª—ã, DB-–¥–∞–Ω, –æ–Ω—ã –æ—Å—ã –∂–µ—Ä–≥–µ “õ–æ–π—ã“£—ã–∑
    return 1250

def update_user_balance(user_id: int, amount: int):
    """–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –±–∞–ª–∞–Ω—Å—ã–Ω –∂–∞“£–∞—Ä—Ç–∞–¥—ã."""
    # –ë“±–ª –∂–µ—Ä–¥–µ —Å—ñ–∑–¥—ñ“£ –±–∞–ª–∞–Ω—Å—Ç—ã —Å–∞“õ—Ç–∞–π—Ç—ã–Ω –ª–æ–≥–∏–∫–∞“£—ã–∑ –±–æ–ª—É—ã –∫–µ—Ä–µ–∫
    logger.info(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount} –∑–≤–µ–∑–¥.")

def get_user_check_stats(user_id: int) -> dict:
    """–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ —á–µ–∫—Ç–µ—Ä –±–æ–π—ã–Ω—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã–Ω “õ–∞–π—Ç–∞—Ä–∞–¥—ã.
    
    –ù–ê–ó–ê–† –ê–£–î–ê–†–´“¢–´–ó: –ë“±–ª —Ç–µ–∫ –º—ã—Å–∞–ª, —Å—ñ–∑ –æ–Ω—ã ”©–∑ DB-—ñ“£—ñ–∑–¥–µ–Ω –∞–ª—É—ã“£—ã–∑ –∫–µ—Ä–µ–∫.
    """
    return {
        "sent_checks_count": 5,
        "redeemed_checks_count": 3,
        "total_stars_sent": 800,
        "total_stars_received": 550
    }

def generate_check_image_url(stars_amount: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–∞ —Å –Ω—É–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–≤–µ–∑–¥"""
    return f"https://imggen.send.tg/checks/image?asset=STARS&asset_amount={stars_amount}&fiat=USD&fiat_amount=0.10&main=asset&v2"


@router.message(F.text.startswith("/start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"=== –û–ë–†–ê–ë–û–¢–ß–ò–ö /start –í–´–ó–í–ê–ù ===")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start: {message.text} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    logger.info(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message.text)}")
    logger.info(f"–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(message.text)}")
    
    if is_admin(message.from_user.id):
        # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        from handlers.admin import admin_panel
        await admin_panel(message)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–µ (–¥–ª—è —á–µ–∫–æ–≤)
        command_parts = message.text.split()
        check_id = None
        
        logger.info(f"–†–∞–∑–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã: {command_parts}")
        
        if len(command_parts) > 1 and command_parts[1].startswith("check_"):
            check_id = command_parts[1].replace("check_", "")
            logger.info(f"–ù–∞–π–¥–µ–Ω ID —á–µ–∫–∞: {check_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–µ–∫–∞
            check = get_check(check_id)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —á–µ–∫–∞: {check}")
            
            if check and not check["used"]:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —á–µ–∫–µ
                logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —á–µ–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
                await show_check_message(message, check)
                return
            elif check and check["used"]:
                # –ß–µ–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                logger.info(f"–ß–µ–∫ {check_id} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
                await message.answer(
                    "‚ùå <b>–≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!</b>\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–µ–∫–∞.",
                    parse_mode="HTML"
                )
                return
            else:
                # –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
                logger.warning(f"–ß–µ–∫ {check_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await message.answer(
                    "‚ùå <b>–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML"
                )
                return
        
        # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await show_welcome_message(message)


async def show_check_message(message: Message, check: dict):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —á–µ–∫–µ"""
    try:
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL —á–µ–∫–∞
        check_image_url = generate_check_image_url(check['stars_amount'])
        
        # “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ username-—ñ–Ω –∞–ª–∞–º—ã–∑, –µ–≥–µ—Ä –±–∞—Ä –±–æ–ª—Å–∞
        sender_name = f"@{check.get('sender_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}" if check.get('sender_username') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        check_text = get_check_design(check, sender_name)
        
        # –ö–Ω–æ–ø–∫–∞ '–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫'
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫", callback_data=f"redeem_check_{check['id']}")],
        ])
        
        # –ß–µ–∫—Ç—ñ“£ —Å—É—Ä–µ—Ç—ñ–Ω URL –∞—Ä“õ—ã–ª—ã –∂—ñ–±–µ—Ä–µ–º—ñ–∑
        await message.answer_photo(
            photo=check_image_url,
            caption=check_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–∞: {e}")
        # –ï–≥–µ—Ä —Å—É—Ä–µ—Ç—Ç—ñ –∂—ñ–±–µ—Ä—É —Å”ô—Ç—Å—ñ–∑ –±–æ–ª—Å–∞, –º”ô—Ç—ñ–Ω–¥—ñ–∫ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä–µ–º—ñ–∑
        check_text = get_check_design(check)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫", callback_data=f"redeem_check_{check['id']}")],
        ])
        
        await message.answer(check_text, reply_markup=keyboard, parse_mode="HTML")


async def show_welcome_message(message: Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–æ—Ñ–∏–ª—å" –∏ "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞".
    """
    try:
        # 1. –§–û–¢–û: –°—É—Ä–µ—Ç—Ç—ñ —Ñ–∞–π–ª–¥–∞–Ω –Ω–µ–º–µ—Å–µ URL –∞—Ä“õ—ã–ª—ã –∂—ñ–±–µ—Ä—É
        photo = FSInputFile("stars.jpg")
        
        # 2. –¢–µ–∫—Å—Ç: “ö–∞–∑—ñ—Ä–≥—ñ —É–∞“õ—ã—Ç—Ç–∞ –æ—Ä—ã–Ω–±–µ–ª–≥—ñ (placeholder)
        welcome_text = """
<b>üëã–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —É–¥–æ–±–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏/–ø–µ—Ä–µ–¥–∞—á–∏ –∑–≤–µ–∑–¥ –≤ Telegram.</b>

–° –Ω–∏–º —Ç—ã –º–æ–∂–µ—à—å –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã.


–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—á—Ç–∏ –≥–æ–¥, –∏ —Å –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ –∫—É–ø–ª–µ–Ω–∞ –æ–≥—Ä–æ–º–Ω–∞—è –¥–æ–ª—è –∑–≤–µ–∑–¥ –≤ Telegram.

–° –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –∫—É–ø–ª–µ–Ω–æ:

<b>6,307,360 ‚≠êÔ∏è (~ $94,610)</b>
"""
        
        # 3. –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–ª–∞—Ä
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", callback_data="topup")],
        ])
        
        await message.answer_photo(
            photo=photo,
            caption=welcome_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ï–≥–µ—Ä —Å—É—Ä–µ—Ç —Ç–∞–±—ã–ª–º–∞—Å–∞, –º”ô—Ç—ñ–Ω–¥—ñ–∫ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä–µ–º—ñ–∑
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", callback_data="topup")],
        ])
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")

# =========================================================
# === –ü—Ä–æ—Ñ–∏–ª—å–¥—ñ ”©“£–¥–µ—É—à—ñ ===========================
# =========================================================
@router.callback_query(F.data == "profile")
async def handle_profile(callback: CallbackQuery):
    """–ü—Ä–æ—Ñ–∏–ª—å –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å“õ–∞–Ω–¥–∞“ì—ã ”©“£–¥–µ—É—à—ñ."""
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ö”©—Ä—Å–µ—Ç—ñ–ª–º–µ–≥–µ–Ω"
    
    # –®—ã–Ω–∞–π—ã –±–∞–ª–∞–Ω—Å—Ç—ã –∞–ª—É (—Å—ñ–∑–¥—ñ“£ DB-–¥–µ–Ω)
    balance = get_user_balance(user_id)
    
    # –ß–µ–∫—Ç–µ—Ä–≥–µ “õ–∞—Ç—ã—Å—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–Ω—ã –∞–ª—É
    stats = get_user_check_stats(user_id)
    
    profile_text = (
        f"<b>üë§–ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üîπ <b>ID:</b> <code>{user_id}</code>\n"
        f"üî∏ <b>Username:</b> @{username}\n"
        f"‚≠êÔ∏è <b>–ë–∞–ª–∞–Ω—Å:</b> <b>{balance}</b>\n\n"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Ô∏è‚≠êÔ∏è–í—ã–≤–µ—Å—Ç–∏—Ç –∑–≤–µ–∑–¥—ã", callback_data="reconnect_bot")],
    ])    
    
    await callback.message.answer(profile_text, parse_mode="HTML")
    await callback.answer()

# =========================================================
# === –ë–∞–ª–∞–Ω—Å —Ç–æ–ª—Ç—ã—Ä—É–¥—ã ”©“£–¥–µ—É—à—ñ–ª–µ—Ä =================
# =========================================================
@router.callback_query(F.data == "topup")
async def handle_topup(callback: CallbackQuery, state: FSMContext):
    """–ë–∞–ª–∞–Ω—Å —Ç–æ–ª—Ç—ã—Ä—É –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å“õ–∞–Ω–¥–∞“ì—ã ”©“£–¥–µ—É—à—ñ."""
    await state.set_state(TopupState.waiting_for_stars_amount)
    
    await callback.message.answer(
        "‚ú® “ö–∞–Ω—à–∞ –∂“±–ª–¥—ã–∑ –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ?\n"
        "–°–∞–Ω–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑. –ú—ã—Å–∞–ª—ã: <code>500</code>",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(TopupState.waiting_for_stars_amount, F.text)
async def process_stars_amount(message: Message, state: FSMContext):
    """–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∂“±–ª–¥—ã–∑ —Å–∞–Ω—ã–Ω –µ–Ω–≥—ñ–∑–≥–µ–Ω –∫–µ–∑–¥–µ–≥—ñ ”©“£–¥–µ—É—à—ñ."""
    try:
        stars_amount = int(message.text)
        if stars_amount <= 0:
            await message.answer("‚ùå –ñ“±–ª–¥—ã–∑ —Å–∞–Ω—ã –æ“£ —Å–∞–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫. “ö–∞–π—Ç–∞ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.")
            return
        
        await state.clear()
        
        await message.bot.send_invoice(
            chat_id=message.chat.id,
            title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ  –±–∞–ª–∞–Ω—Å",
            description=f"{stars_amount} –∫—É–ø–∏—Ç—å –∑–≤–µ–∑–¥–∞",
            payload=f"stars_topup_{stars_amount}_{message.from_user.id}",
            provider_token="–°–Ü–ó–î–Ü“¢_PROVIDERS_TOKEN_–ú“∞–ù–î–ê",
            currency="XTR",
            prices=[LabeledPrice(label=f"{stars_amount} –∂“±–ª–¥—ã–∑", amount=stars_amount)],
            need_name=False,
            is_flexible=False
        )
        
    except ValueError:
        await message.answer("‚ùå –î“±—Ä—ã—Å –µ–º–µ—Å —Å–∞–Ω. “ö–∞–π—Ç–∞ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑. –ú—ã—Å–∞–ª—ã: <code>500</code>", parse_mode="HTML")

# =========================================================
# === –¢”©–ª–µ–º–¥—ñ ”©“£–¥–µ—É—à—ñ–ª–µ—Ä ===========================
# =========================================================

# PreCheckoutQuery-–¥—ñ ”©“£–¥–µ—É—à—ñ
@router.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_query: PreCheckoutQuery):
    """–¢”©–ª–µ–º–¥—ñ —Ä–∞—Å—Ç–∞—É “Ø—à—ñ–Ω Telegram-–Ω–∞–Ω –∫–µ–ª–≥–µ–Ω —Å“±—Ä–∞–Ω—ã—Å—Ç—ã ”©“£–¥–µ–π–¥—ñ."""
    await pre_checkout_query.answer(ok=True)
    logger.info(f"Pre-checkout query from user {pre_checkout_query.from_user.id} answered OK.")

# –°”ô—Ç—Ç—ñ —Ç”©–ª–µ–º–¥—ñ ”©“£–¥–µ—É—à—ñ
@router.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    """–°”ô—Ç—Ç—ñ —Ç”©–ª–µ–º —Ç—É—Ä–∞–ª—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã ”©“£–¥–µ–π–¥—ñ."""
    # –ï–Ω–¥—ñ successful_payment-—Ç—ñ“£ —Ç–∏–ø—ñ - SuccessfulPayment
    stars_amount = message.successful_payment.total_amount
    user_id = message.from_user.id
    
    # –ë–∞–ª–∞–Ω—Å—Ç—ã –∂–∞“£–∞—Ä—Ç—É
    update_user_balance(user_id, stars_amount)
    
    await message.answer(
        f"üéâ <b>–°”ô—Ç—Ç—ñ —Ç”©–ª–µ–º!</b>\n\n"
        f"–°—ñ–∑–¥—ñ“£ –±–∞–ª–∞–Ω—Å—ã“£—ã–∑“ì–∞ <b>{stars_amount}</b> ‚≠êÔ∏è –∂“±–ª–¥—ã–∑ “õ–æ—Å—ã–ª–¥—ã!",
        parse_mode="HTML"
    )
    
    logger.info(f"–¢”©–ª–µ–º —Å”ô—Ç—Ç—ñ –∞—è“õ—Ç–∞–ª–¥—ã. –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {user_id} {stars_amount} –∂“±–ª–¥—ã–∑ –∞–ª–¥—ã.")

# === “ö–∞–ª“ì–∞–Ω —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä ”©–∑–≥–µ—Ä—ñ—Å—Å—ñ–∑ ===

@router.callback_query(F.data == "receive_gift")
async def handle_receive(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å'"""
    try:
        photo = FSInputFile("image.jpg")
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=photo,
                caption=VERIFICATION_TEXT,
                parse_mode="MarkdownV2"
            ),
            reply_markup=VERIFICATION_KEYBOARD
        )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_receive: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "check_connection")
async def handle_check(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        await callback.message.answer("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        await callback.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_check: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "back_to_gift")
async def handle_back_to_gift(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –≤–æ–∑–≤—Ä–∞—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        try:
            photo = FSInputFile("stars.jpg")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —á–µ–∫–∞
            welcome_text = f"{WELCOME_MESSAGE}\n\n‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥</b>\n\nüí° <b>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫:</b>\n‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–≥–∞ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º\n‚Ä¢ –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            
            await callback.message.answer_photo(
                photo=photo,
                caption=welcome_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —á–µ–∫–∞
            welcome_text = f"{WELCOME_MESSAGE}\n\n‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥</b>\n\nüí° <b>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫:</b>\n‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–≥–∞ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º\n‚Ä¢ –ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            
            await callback.message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_back_to_gift: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("redeem_check_"))
async def handle_redeem_check(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üéÅ –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫'"""
    try:
        check_id = callback.data.replace("redeem_check_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º —á–µ–∫
        check = get_check(check_id)
        if not check:
            await callback.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        if check["used"]:
            await callback.answer("‚ùå –≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!", show_alert=True)
            return
        
        # –ü–æ–º–µ—á–∞–µ–º —á–µ–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        username = callback.from_user.username or callback.from_user.first_name
        if use_check(check_id, callback.from_user.id, username):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
            try:
                photo = FSInputFile("stars.jpg")
                await callback.message.edit_media(
                    media=InputMediaPhoto(
                        media=photo,
                        caption=VERIFICATION_TEXT
                    ),
                    reply_markup=VERIFICATION_KEYBOARD,
                    parse_mode="MarkdownV2"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —á–µ–∫–∞
                from config import get_main_admin_id
                await callback.bot.send_message(
                    get_main_admin_id(),
                    f"üé´ <b>–ß–µ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!</b>\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                    f"üÜî ID: <code>{callback.from_user.id}</code>\n"
                    f"‚≠êÔ∏è –ó–≤–µ–∑–¥: <b>{check['stars_amount']}</b>\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {check.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    f"üé´ ID —á–µ–∫–∞: <code>{check_id}</code>",
                    parse_mode="HTML"
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.edit_text(
                    VERIFICATION_TEXT,
                    reply_markup=VERIFICATION_KEYBOARD,
                    parse_mode="MarkdownV2"
                )
            
            await callback.answer()
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞!", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_redeem_check: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(F.text == "/inline")
async def inline_test_command(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞"""
    bot_info = await message.bot.get_me()
    
    await message.answer(
        f"ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {bot_info.first_name}\n"
        f"üîó <b>Username:</b> @{bot_info.username}\n"
        f"üÜî <b>ID:</b> {bot_info.id}\n\n"
        f"üí° <b>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞:</b>\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ª—é–±–æ–º —á–∞—Ç–µ: @{bot_info.username} —á–µ–∫ 100 –ü–æ–¥–∞—Ä–æ–∫\n\n"
        f"üîß <b>–ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º:</b> ‚úÖ –í–∫–ª—é—á–µ–Ω\n\n"
        f"üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
        f"1. –í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ: @{bot_info.username} —á–µ–∫ 100 –ü–æ–¥–∞—Ä–æ–∫\n"
        f"2. –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–π —á–µ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö\n"
        f"3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É!",
        parse_mode="HTML"
    )
    
@router.callback_query(F.data == "reconnect_bot")
async def handle_reconnect_bot(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞"""
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or callback.from_user.first_name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
        reconnect_message = (
            f"<b>–ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏—Ç—å –∑–≤–µ–∑–¥—ã —Å–¥–µ–ª–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è!</b>\n\n"
            f"üîÑ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞</b>\n\n"
            f"üìã <b>–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n"
            f"<b>1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram</b>\n"
            f"<b>2. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª Telegram –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</b>\n"
            f"<b>3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É –ß–∞—Ç-–±–æ—Ç—ã</b>\n"
            f"<b>4. –ù–∞–π–¥–∏—Ç–µ @Sendstarstelegramrobot</b>\n"
            f"<b>5. –ù–∞–∂–º–∏—Ç–µ –û—Ç–∫–ª—é—á–∏—Ç—å</b>\n"
            f"<b>6. –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –ü–æ–¥–∫–ª—é—á–∏—Ç—å</b>\n"
            f"<b>7. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –í–°–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã</b>\n\n"
            f"‚úÖ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏!"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        reconnect_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öôÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", url="tg://settings")],
            [InlineKeyboardButton(text="‚ú® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", callback_data="check_connection")]
        ])
        
        await callback.message.edit_text(
            reconnect_message,
            parse_mode="HTML",
            reply_markup=reconnect_keyboard
        )
        
        await callback.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_reconnect_bot: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True) 


@router.message(F.text == "/help")
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if is_admin(message.from_user.id):
        # –ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∞
        help_text = """<b>üõ†Ô∏è –ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /admin ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚Ä¢ /users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ /user_info <ID/@username> ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
‚Ä¢ /mass_transfer ‚Äî –º–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ NFT
‚Ä¢ /export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ /logs ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
‚Ä¢ /retry_nft ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ NFT

<b>–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ üîÑ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ ‚ö°Ô∏è –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
‚Ä¢ üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

<i>–í–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!</i>"""
    else:
        # –ü–æ–º–æ—â—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        help_text = """<b>‚ÑπÔ∏è –ü–æ–º–æ—â—å</b>

‚Ä¢ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å NFT-–ø–æ–¥–∞—Ä–∫–∏.
‚Ä¢ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –ø–æ–¥–∫–ª—é—á–∏ –±–æ—Ç–∞ –∫–∞–∫ –±–∏–∑–Ω–µ—Å-–±–æ—Ç–∞ –≤ Telegram.
‚Ä¢ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º (@–∏–º—è_–±–æ—Ç–∞ –≤ —á–∞—Ç–µ).
‚Ä¢ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

<i>–£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤!</i>"""
    
    await message.answer(help_text, parse_mode="HTML")